/** –ö—Ä–∏–≤–æ—à–∞–ø–∫–æ –ú–∞—Ä–∏—è, 699 –≥—Ä—É–ø–ø–∞.
 * –î–∞–Ω—ã —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –≤ –æ–±—Ä–∞—Ç–Ω–æ–π –ø–æ–ª—å—Å–∫–æ–π –Ω–æ—Ç–∞—Ü–∏–∏ ùõº –∏ —Å–ª–æ–≤–æ ùë¢ ‚àà { ùëé, ùëè, ùëê }*
 * –ù–∞–π—Ç–∏ –¥–ª–∏–Ω—É —Å–∞–º–æ–≥–æ –¥–ª–∏–Ω–Ω–æ–≥–æ –ø–æ–¥—Å–ª–æ–≤–∞ —Å–ª–æ–≤–∞ ùë¢, —è–≤–ª—è—é—â–µ–≥–æ—Å—è —Ç–∞–∫–∂–µ –ø–æ–¥—Å–ª–æ–≤–æ–º –Ω–µ–∫–æ—Ç–æ—Ä–æ–≥–æ —Å–ª–æ–≤–∞ –≤
 * ùêø(ùõº).
 * C—É—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º–∞: –ø–æ—Å—Ç—Ä–æ–∏—Ç—å e-NFA –∞–≤—Ç–æ–º–∞—Ç –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è, –¥–∞–Ω–Ω–æ–≥–æ –≤ —É—Å–ª–æ–≤–∏–∏. –î–ª—è —ç—Ç–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å
 * –∞–≤—Ç–æ–º–∞—Ç –µ–≥–æ –ø–æ–¥—Å–ª–æ–≤. –ü–æ–ª—É—á–µ–Ω–Ω—ã–º –∞–≤—Ç–æ–º–∞—Ç–æ–º –±—É–¥–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–ª–æ–≤–æ —Å –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏ —Å–ª–æ–≤–∞ dfs-–æ–º. –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã
 * –Ω–µ –ø—Ä–æ–π—Ç–∏ –ø–æ —Ü–∏–∫–ª—É –∏–∑ —ç–ø—Å–∏–ª–æ–Ω-—Ä–µ–±–µ—Ä —Ö—Ä–∞–Ω–∏–º –º–∞—Ç—Ä–∏—Ü—É visited[text_position][state_index], –ø–æ–∫–∞–∑—ã–≤–∞—é—â—É—é –ø—Ä–∏—à–ª–∏ –ª–∏ –º—ã
 * –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ state_index –∏–∑ –ø–æ–∑–∏—Ü–∏–∏ text_position
 */

#include <iostream>
#include <stack>
#include <string>
#include <vector>

using namespace std;

struct Edge {
    int v_;
    string letter_;
    Edge(int to, string letter): v_(to), letter_(letter) {}
};
class AutomatonBuilder {
private:
    size_t vertices_num_;
    vector<vector<Edge> > transitions_;
    vector<bool> terminals_;
    int FindFirstBad(int node_index,
                     int position,
                     const string& word,
                     vector< vector<bool> >& visited ) const {
        /** –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—É—é –ø–æ–∑–∏—Ü–∏—é, –Ω–µ –≤—Ö–æ–¥—è—â—É—é –≤ –ø–æ–¥—Å–ª–æ–≤–æ,
         * –Ω–∞—á–∏–Ω–∞—é—â–µ–µ—Å—è —Å –ø–æ–∑–∏—Ü–∏–∏ position –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è node_index
         * –¥–ª–∏–Ω–∞ max_length –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞—Ç—å—Å—è –ø–æ —Ñ–æ—Ä–º—É–ª–µ first_bad(—Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã) - position.
         */
        if( position == word.length() ) {
            return position;
        }
        visited[position][node_index] = true;
        int result = position;
        for (int j = 0; j < transitions_[node_index].size(); ++j) {
            string new_letter = transitions_[node_index][j].letter_;
            int new_v = transitions_[node_index][j].v_;
            int new_position = (new_letter == "") ? position : position + 1;
            // –∫–∞–∫ –≤–∏–¥–∏–º, –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –ø–æ —ç–ø—Å–∏–ª–æ–Ω-—Ä–µ–±—Ä—É –ø–æ–∑–∏—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è.
            if((new_letter == "" || new_letter == string({ word[position] })) &&
               !visited[new_position][new_v]) {
                result = max(result, FindFirstBad(new_v, new_position, word, visited));
            }
        }
        return result;
    }
    bool ParsablePostfixRegex (const string &regex) {
        /** –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤–≤–æ–¥–∞
         */
        int stack_size = 0;
        int error = 0;
        for (int i = 0; i < regex.length(); ++i) {
            char current_char = regex[i];
            switch (current_char) {
                case '1':
                case 'a':
                case 'b':
                case 'c':
                    ++stack_size;
                    break;
                case '*':
                    if (stack_size == 0) {
                        error = 1;
                    }
                    break;
                case '+':
                case '.':
                    if (stack_size < 2) {
                        error = 1;
                    }
                    --stack_size;
                    break;
                default:
                    error = 1;
            }
            if (error) {
                return false;
            }
        }
        return (stack_size == 1);
    }
public:
    AutomatonBuilder() {}
    AutomatonBuilder(char x):transitions_(vector<vector<Edge> >(2)), terminals_(vector<bool>(2)) {
        if (x == '1') {
            vertices_num_ = 1;
            terminals_.pop_back();
            terminals_[0] = true;
        } else {
            vertices_num_ = 2;
            string s = "";
            s += x;
            transitions_[0].push_back(Edge(1, s));
            terminals_[0] = false;
            terminals_[1] = true;
        }
    }
    AutomatonBuilder(string s) {
        if (!ParsablePostfixRegex(s)) {
            std::cout << "Wrong input format" << endl;
            vertices_num_ = 0;
        } else {
            stack<AutomatonBuilder> st;
            for (int i = 0; i < s.size(); ++i) {
                if (s[i] == 'a' || s[i] == 'b' || s[i] == 'c' || s[i] == '1') {
                    st.push(AutomatonBuilder(s[i]));
                } else if (s[i] == '*') {
                    AutomatonBuilder temp((st.top()).Star());
                    st.pop();
                    st.push(temp);
                } else if (s[i] == '+') {
                    AutomatonBuilder temp(st.top());
                    st.pop();
                    AutomatonBuilder temp2(st.top());
                    st.pop();
                    st.push(temp2 + temp);
                } else if (s[i] == '.') {
                    AutomatonBuilder temp(st.top());
                    st.pop();
                    AutomatonBuilder temp2(st.top());
                    st.pop();
                    st.push(temp2 * temp);
                }
            }
            AutomatonBuilder other = st.top();
            vertices_num_ = other.vertices_num_;
            transitions_ = other.transitions_;
            terminals_ = other.terminals_;
            //    print();
            FormSubstringsAutomaton();
        }

    }

    AutomatonBuilder (unsigned int vertices_num, const vector< vector<Edge> >& transitions, vector<bool> terminals):
            vertices_num_(vertices_num),
            transitions_(transitions),
            terminals_(terminals) {}
    AutomatonBuilder (const AutomatonBuilder& other) {
        vertices_num_ = other.vertices_num_;
        transitions_ = other.transitions_;
        terminals_ = other.terminals_;
    }

    AutomatonBuilder operator + (const AutomatonBuilder& other) const {
        /** C–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—É—é –≤–µ—Ä—à–∏–Ω—É, –∏–∑ –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–æ–≤–µ–¥–µ–º —ç–ø—Å–∏–ª–æ–Ω-—Ä–µ–±—Ä–∞ –≤ –Ω–∞—á–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–≤—É—Ö –∞–≤—Ç–æ–º–∞—Ç–æ–≤,
        * –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–±—Ä–∞ –º–µ–Ω—è—Ç—å –Ω–µ –±—É–¥–µ–º. –î–æ–±–∞–≤—è—Ç—Å—è –¥–≤–∞ —Ä–µ–±—Ä–∞.
        */
        std::size_t new_vertices_num = vertices_num_ + other.vertices_num_ + 1;
        vector< vector<Edge> > new_transitions (new_vertices_num);
        vector<bool> new_terminals(new_vertices_num);

        new_transitions[0].push_back(Edge(1, ""));
        new_transitions[0].push_back(Edge(vertices_num_ + 1, ""));

        for (int i = 0; i < vertices_num_; ++i) {
            for (int j = 0; j < transitions_[i].size(); ++j) {
                int new_v = transitions_[i][j].v_ + 1;
                string new_letter = transitions_[i][j].letter_;
                new_transitions[i + 1].push_back(Edge(new_v, new_letter));
            }
            new_terminals[i + 1] = terminals_[i];
        }
        for (int i = 0; i < other.vertices_num_; ++i) {
            int index = vertices_num_ + i + 1;
            for (int j = 0; j < other.transitions_[i].size(); ++j) {
                int new_v = other.transitions_[i][j].v_ + vertices_num_ + 1;
                string new_letter = other.transitions_[i][j].letter_;
                new_transitions[index].push_back(Edge(new_v, new_letter));
            }
            new_terminals[index] = other.terminals_[i];
        }

        return AutomatonBuilder(new_vertices_num, new_transitions, new_terminals);
    }

    AutomatonBuilder operator * (const AutomatonBuilder& other) const {
        /** –ò–∑ –∑–∞–≤–µ—Ä—à–∞—é—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞
         * –ø—Ä–æ–≤–µ–¥–µ–º —ç–ø—Å–∏–ª–æ–Ω-—Ä–µ–±—Ä–æ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ.
         * –°–Ω–∏–º–µ–º —Å –∑–∞–≤–µ—Ä—à–∞—é—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞ –ø–æ–º–µ—Ç–∫—É
         * —Ç–æ–≥–æ, —á—Ç–æ –æ–Ω–æ –∑–∞–≤–µ—Ä—à–∞—é—â–µ–µ.
         */
        size_t new_vertices_num = vertices_num_ + other.vertices_num_;
        vector< vector<Edge> > new_transitions (new_vertices_num);
        vector<bool> new_terminals(new_vertices_num);

        for (int i = 0; i < vertices_num_; ++i) {
            for (int j = 0; j < transitions_[i].size(); ++j) {
                new_transitions[i].push_back(Edge(transitions_[i][j].v_, transitions_[i][j].letter_));
            }
            new_terminals[i] = false;
            if (terminals_[i]) {
                new_transitions[i].push_back(Edge(vertices_num_, ""));
            }
        }
        for (int i = 0; i < other.vertices_num_; ++i) {
            for (int j = 0; j < other.transitions_[i].size(); ++j) {
                new_transitions[vertices_num_ + i].push_back(Edge(other.transitions_[i][j].v_ + vertices_num_, other.transitions_[i][j].letter_));
            }
            new_terminals[vertices_num_ + i] = other.terminals_[i];
        }
        return AutomatonBuilder(new_vertices_num, new_transitions, new_terminals);
    }

    AutomatonBuilder Star() const {
        /** –î–æ–±–∞–≤–∏–º –Ω–æ–≤—É—é —Å—Ç–∞—Ä—Ç–æ–≤—É—é –≤–µ—Ä—à–∏–Ω—É, –∏–∑ –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–æ–≤–µ–¥–µ–º —ç–ø—Å–∏–ª–æ–Ω-–ø–µ—Ä–µ—Ö–æ–¥ –≤ —Å—Ç–∞—Ä—Ç–æ–≤—É—é –≤–µ—Ä—à–∏–Ω—É
         * –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞. –ü–æ–º–µ—Ç–∏–º –Ω–æ–≤—É—é —Å—Ç–∞—Ä—Ç–æ–≤—É—é –≤–µ—Ä—à–∏–Ω—É –≤–µ—Ä—à–∏–Ω—É –∑–∞–≤–µ—Ä—à–∞—é—â–µ–π, –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –≤–µ—Ä—à–∏–Ω—ã
         * —Å–¥–∫–ª–∞–µ–º –Ω–µ–∑–∞–≤–µ—Ä—à–∞—é—â–∏–º–∏. –ï—Å–ª–∏ —Å—Ç–∞—Ä–∞—è –≤–µ—Ä—à–∏–Ω–∞ - –∑–∞–≤–µ—Ä—à–∞—é—â–∞—è –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –∞–≤—Ç–æ–º–∞—Ç–µ, –ø—Ä–æ–≤–µ–¥–µ–º –∏–∑ –Ω–µ–µ —ç–ø—Å–∏–ª–æ–Ω-—Ä–µ–±—Ä–æ
         * –≤ –Ω–æ–≤—É—é —Å—Ç–∞—Ä—Ç–æ–≤—É—é –≤–µ—Ä—à–∏–Ω—É.
         */
        size_t new_vertices_num = vertices_num_ + 1;
        vector< vector<Edge> > new_transitions (new_vertices_num);
        vector<bool> new_terminals(new_vertices_num);
        new_terminals[0] = true;
        new_transitions[0].push_back(Edge(1, ""));

        for (int i = 0; i < vertices_num_; ++i) {
            for (int j = 0; j < transitions_[i].size(); ++j) {
                new_transitions[i + 1].push_back(Edge(transitions_[i][j].v_ + 1, transitions_[i][j].letter_));
            }
            new_terminals[i + 1] = false;
            if (terminals_[i]) {
                new_transitions[i + 1].push_back(Edge(0, ""));
            }
        }
        return AutomatonBuilder(new_vertices_num, new_transitions, new_terminals);
    }

    void print() const {
        std::cout << "Number of conditions: " << vertices_num_ << endl;
        std::cout << "Finals: ";
        for (int i = 0; i < vertices_num_; ++i) {
            if (terminals_[i]) {
                std::cout << i << ' ';
            }
        }
        std::cout << std::endl;
        std::cout << "transitions_ sizes: ";
        for (int i = 0; i < vertices_num_; ++i) {
            std::cout << transitions_[i].size() << ' ';
        }
        std::cout << std::endl;
        for (int i = 0; i < vertices_num_; ++i) {
            for (int j = 0; j < transitions_[i].size(); ++j) {
                std::cout << i << " --> " << transitions_[i][j].v_ << "(" << transitions_[i][j].letter_ << ")" << std::endl;
            }
        }
    }

    void FormSubstringsAutomaton() {
        /** –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –Ω–∞—á–∞–ª—å–Ω—Ü—é –∏ –∫–æ–Ω–µ—á–Ω—É—é –≤–µ—Ä—à–∏–Ω—É. –ò–∑ –≤—Å–µ—Ö –≤–µ—Ä—à–∏–Ω –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–º —ç–ø—Å–∏–ª–æ–Ω —Ä–µ–±—Ä–∞
         * –≤ –Ω–æ–≤—É—é –∑–∞–≤–µ—Ä—à–∞—é—â—É—é –≤–µ—Ä—à–∏–Ω—É –∏ –∏–∑ –Ω–æ–≤–æ–π —Å—Ç–∞—Ä–æ—Ç–æ–≤–æ–π –ø—Ä–æ–≤–µ–¥–µ–º —ç–ø—Å–∏–ª–æ–Ω –ø–µ—Ä–µ—Ö–æ–¥—ã –≤–æ –≤—Å–µ –∏—Å—Ö–æ–¥–Ω—ã–µ –≤–µ—Ä—à–∏–Ω—ã
         */
        size_t new_vertices_num = vertices_num_ + 2;
        vector<bool> new_terminals(new_vertices_num, false);
        new_terminals[new_vertices_num - 1] = true;
        vector< vector<Edge> >  new_transitions(new_vertices_num);
        for (int i = 0; i < vertices_num_; ++i) {
            new_transitions[0].push_back(Edge(i + 1, ""));
            new_transitions[i + 1].push_back(Edge(new_vertices_num - 1, ""));
        }
        for (int i = 0; i < vertices_num_; ++i) {
            for (int j = 0; j < transitions_[i].size(); ++j) {
                int new_v = transitions_[i][j].v_ + 1;
                string new_letter = transitions_[i][j].letter_;
                new_transitions[i + 1].push_back(Edge(new_v, new_letter));
            }
        }
        terminals_ = new_terminals;
        transitions_ = new_transitions;
        vertices_num_= new_vertices_num;
    }
    int ProcessWord(const string &word_to_process);

};
int main() {
    string s, pattern;
    std::cin >> s >> pattern;
    AutomatonBuilder D(s);
    int answer = D.ProcessWord(pattern);
    std::cout << "answer is " << answer << std::endl;
}
//acb..bab.c.*.ab.ba.+.+*a. cbaa
//ab+c.aba.*.bac.+.+* babc
int AutomatonBuilder::ProcessWord(const string &word_to_process) {
    /** –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞. –û—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –¥—Ñ—Å-–æ–º FindFirstBad(node, text_position, word, visited
     * –ø–æ —Ö–æ–¥—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç max_length
     * visited[text_position][state_index] —Ö—Ä–∞–Ω–∏—Ç true/false –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –ø—Ä–∏—à–ª–∏ –ª–∏ –º—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º
     * state_index, –∑–∞–ø—É—Å—Ç–∏–≤ —Å–ª–æ–≤–æ —Å –ø–æ–∑–∏—Ü–∏–∏ text_position. –≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –Ω–µ –∑–∞—Ö–æ–¥–∏—Ç—å –≤ —Ü–∏–∫–ª—ã –∏–∑ —ç–ø—Å–∏–ª–æ–Ω —Ä–µ–±–µ—Ä
     * text_position –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –µ—Å–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥ –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω –ø–æ —Ç–µ–∫—É—â–µ–π –±—É–∫–≤–µ word[text_position] —Å–ª–æ–≤–∞ word
     */
    if (vertices_num_ == 0) {
        std::cout << "Wrong input" << std::endl;
        return -1;
    }
    int max_length = 0;
    size_t word_length = word_to_process.length();
    for (int s = 0; s < word_length; ++s) {
        vector <bool> visited_nodes(vertices_num_, false);
        vector < vector<bool> > visited;
        visited.assign(word_length + 1, visited_nodes);
        // –ó–∞–ø–æ–ª–Ω–∏–º –≤—Å–µ —Å—Ä–∞–∑—É
        for (int k = 0; k <= word_length; ++k) {
            for (int i = 0; i < vertices_num_; ++i) {
                visited[k][i] = false;
            }
        }
        int temp_res = FindFirstBad(0, s, word_to_process, visited) - s;
        max_length = max(max_length, temp_res);
        //    cout << "ml" << max_length;
    }

    return max_length;
}
